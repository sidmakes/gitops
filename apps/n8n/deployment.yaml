apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: n8n
spec:
  replicas: 1
  selector: { matchLabels: { app: n8n } }
  template:
    metadata: { labels: { app: n8n } }
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: n8n
          image: n8nio/n8n:latest
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          ports: [{ containerPort: 5678 }]
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
          env:
            - name: N8N_HOST
              value: n8n.sidmakes.com
            - name: N8N_PORT
              value: "5678"
            - name: N8N_PROTOCOL
              value: https
            - name: N8N_EDITOR_BASE_URL
              value: https://n8n.sidmakes.com/
            - name: WEBHOOK_URL
              value: https://n8n.sidmakes.com/
            - name: N8N_RUNNERS_ENABLED
              value: "true"
            - name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
              value: "true"
            - name: NODE_ENV
              value: production
            - name: DB_TYPE
              value: postgresdb
            - name: DB_POSTGRESDB_DATABASE
              value: n8n
            - name: DB_POSTGRESDB_SSL_ENABLED
              value: "true"
            - name: DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED
              value: "false"
          envFrom:
            - secretRef:
                name: rds-postgres
            - secretRef:
                name: n8n-config
                optional: true
      initContainers:
        - name: init-create-n8n-db
          image: postgres:16-alpine
          envFrom:
            - secretRef:
                name: rds-postgres
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: rds-postgres
                  key: DB_POSTGRESDB_PASSWORD
            - name: PGSSLMODE
              value: require
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail
              # Create database if it does not exist
              if ! psql -h "$DB_POSTGRESDB_HOST" -p "$DB_POSTGRESDB_PORT" -U "$DB_POSTGRESDB_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname = 'n8n'" | grep -q 1; then
                psql -h "$DB_POSTGRESDB_HOST" -p "$DB_POSTGRESDB_PORT" -U "$DB_POSTGRESDB_USER" -d postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE n8n"
              fi

