apiVersion: v1
kind: ServiceAccount
metadata:
  name: eso-n8n
  namespace: n8n
  annotations:
    argocd.argoproj.io/sync-wave: "-3"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-rds-postgres-secret
  namespace: default
  annotations:
    argocd.argoproj.io/sync-wave: "-3"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["rds-postgres"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: allow-n8n-read-rds-postgres-secret
  namespace: default
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
subjects:
  - kind: ServiceAccount
    name: eso-n8n
    namespace: n8n
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: read-rds-postgres-secret
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: k8s-default-secrets
  namespace: n8n
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  provider:
    kubernetes:
      remoteNamespace: default
      server:
        url: https://kubernetes.default.svc
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          namespace: n8n
          key: ca.crt
      auth:
        serviceAccount:
          name: eso-n8n
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rds-postgres
  namespace: n8n
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: k8s-default-secrets
    kind: SecretStore
  target:
    name: rds-postgres
    creationPolicy: Owner
    template:
      engineVersion: v2
      type: Opaque
      data:
        DB_POSTGRESDB_HOST: "{{ .host }}"
        DB_POSTGRESDB_PORT: "{{ .port }}"
        DB_POSTGRESDB_USER: "{{ .username }}"
        DB_POSTGRESDB_PASSWORD: "{{ .password }}"
  data:
    - secretKey: host
      remoteRef:
        key: rds-postgres
        property: host
    - secretKey: port
      remoteRef:
        key: rds-postgres
        property: port
    - secretKey: username
      remoteRef:
        key: rds-postgres
        property: username
    - secretKey: password
      remoteRef:
        key: rds-postgres
        property: password

